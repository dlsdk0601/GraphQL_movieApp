{"version":3,"sources":["routes/Detail.js","components/Movie.js","routes/Home.js","components/App.js","apollo.js","index.js"],"names":["GET_MOVIE","gql","Detail","id","useParams","useQuery","variables","loading","data","Container","Column","Title","movie","title","isLiked","Subtitle","language","rating","Description","description_intro","Poster","bg","medium_cover_image","styled","div","h1","h4","p","props","LIKE_MOVIE","Movie","useMutation","parseInt","toggleMovie","to","onClick","GET_MOVIES","Home","error","console","log","Header","movies","Movies","map","m","header","h3","App","exact","path","component","client","ApolloClient","uri","resolvers","Mutation","toggleLikeMovie","_","cache","writeData","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.cd4c7974.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {gql} from \"apollo-boost\";\r\nimport {useQuery} from \"@apollo/react-hooks\";\r\nimport styled from \"styled-components\";\r\n\r\nconst GET_MOVIE = gql`\r\n    query getMovie($id: Int!){\r\n        movie(id: $id){\r\n            title\r\n            medium_cover_image \r\n            language\r\n            rating\r\n            description_intro\r\n            isLiked @client\r\n        }\r\n        suggestions( id:$id){\r\n          id\r\n          medium_cover_image\r\n        }\r\n    }\r\n`\r\n\r\nconst Detail = () => {\r\n    const { id } = useParams();\r\n    const { loading, data } = useQuery(GET_MOVIE, {\r\n        variables: { id: +id }\r\n    });\r\n\r\n     return (\r\n        <Container>\r\n            <Column>\r\n                <Title>{loading ? \"loading...\" : `${data.movie.title} ${data.movie.isLiked ? \"Good\" : \"Bad\"}`}</Title>\r\n                <Subtitle>{data?.movie?.language} Â· {data?.movie?.rating}</Subtitle>\r\n                <Description>{data?.movie?.description_intro}</Description>\r\n            </Column>\r\n            <Poster bg={ data?.movie?.medium_cover_image}></Poster>\r\n        </Container>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  color: white;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  margin-left: 10px;\r\n  width: 50%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 65px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst Subtitle = styled.h4`\r\n  font-size: 35px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  font-size: 28px;\r\n  \r\n`;\r\n\r\nconst Poster = styled.div`\r\n  width: 25%;\r\n  height: 60%;\r\n  background-color: transparent;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  background-image: url(${props => props.bg});\r\n`;\r\n","import { useMutation } from '@apollo/client';\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {gql} from \"apollo-boost\";\r\nimport {useQuery} from \"@apollo/react-hooks\";\r\n\r\nconst LIKE_MOVIE = gql`\r\n  mutation toggleLikeMovie($id: Int!, $isLiked: Boolean!){\r\n    toggleLikeMovie(id: $id, isLiked: $isLiked) @client\r\n  }\r\n`\r\n\r\nconst GET_MOVIE = gql`\r\n    query getMovie($id: Int!){\r\n        movie(id: $id){\r\n            title\r\n            medium_cover_image \r\n            language\r\n            rating\r\n            description_intro\r\n            isLiked @client\r\n        }\r\n        suggestions( id:$id){\r\n          id\r\n          medium_cover_image\r\n        }\r\n    }\r\n`\r\n\r\nconst Movie = ( {id, bg, isLiked} ) => {\r\n\r\n  const [toggleMovie] = useMutation(LIKE_MOVIE, {variables: { id: parseInt(id), isLiked } })\r\n  useQuery(GET_MOVIE, { variables: { id: +id } });\r\n\r\n    return (\r\n        <Container>\r\n            <Link to={`/${id}`}>\r\n                <Poster bg={bg} />\r\n                <p onClick={toggleMovie}>{isLiked ? \"Unlike\" : \"Like\"}</p>\r\n            </Link>\r\n            \r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Movie;\r\n\r\nconst Container = styled.div`\r\n  height: 380px;\r\n  width: 100%;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n  overflow: hidden;\r\n  border-radius: 7px;\r\n`;\r\n\r\nconst Poster = styled.div`\r\n  background-image: url(${props => props.bg});\r\n  height: 100%;\r\n  width: 100%;\r\n  background-size: cover;\r\n  background-position: center center;\r\n`;","import React, {useState} from 'react';\r\nimport {gql} from \"apollo-boost\";\r\nimport {useQuery} from \"@apollo/react-hooks\";\r\nimport styled from \"styled-components\";\r\nimport Movie from \"../components/Movie\";\r\n\r\n\r\nconst GET_MOVIES = gql`{\r\n        movies {\r\n            id\r\n            medium_cover_image\r\n            isLiked @client\r\n        }\r\n    }`\r\n\r\nconst Home = () => {\r\n\r\n    const { loading, error, data } = useQuery(GET_MOVIES);\r\n    console.log(data);\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <Title>Apollo 2020</Title>\r\n                <Subtitle>I love GraphQL</Subtitle>\r\n            </Header>\r\n              {(!loading && data.movies) && (\r\n                    <Movies>\r\n                    {\r\n                        data?.movies?.map(m => (\r\n                            <Movie \r\n                              key={m.id} \r\n                              isLiked={m.isLiked} \r\n                              id={m.id} \r\n                              bg={m.medium_cover_image} \r\n                            />\r\n                        ))\r\n                    }\r\n                    </Movies>\r\n                )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\nconst Header = styled.header`\r\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\r\n  height: 45vh;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\nconst Title = styled.h1`\r\n  font-size: 60px;\r\n  font-weight: 600;\r\n  margin-bottom: 20px;\r\n`;\r\nconst Subtitle = styled.h3`\r\n  font-size: 35px;\r\n`;\r\nconst Loading = styled.div`\r\n  font-size: 18px;\r\n  opacity: 0.5;\r\n  font-weight: 500;\r\n  margin-top: 10px;\r\n`;\r\nconst Movies = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-gap: 25px;\r\n  width: 60%;\r\n  position: relative;\r\n  top: -50px;\r\n`;","import React from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport Detail from '../routes/Detail';\r\nimport Home from '../routes/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"/:id\" component={Detail} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"https://movieql2.vercel.app/\",\r\n    resolvers:{\r\n        Movie: {\r\n            isLiked: () => false\r\n        },\r\n        Mutation: {\r\n            toggleLikeMovie: (_, { id, isLiked}, {cache}) => {\r\n                    cache.writeData({\r\n                        id: `Movie:${id}`, \r\n                        data: {\r\n                        isLiked: !isLiked\r\n                        }\r\n                    })\r\n            },\r\n        }\r\n    }\r\n})\r\n\r\nexport default client;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport client from \"./apollo\";\r\nimport {ApolloProvider} from \"@apollo/react-hooks\";\r\n\r\nReactDOM.render( \r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>, document.getElementById('root') );\r\n\r\n"],"sourceRoot":""}